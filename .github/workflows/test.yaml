---
# @see https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions
#
# Services feature of GitHub Actions isn't fit for our purposes for testing.
# We cannot overwrite arguments of ENTRYPOINT.
# @see https://docs.docker.com/engine/reference/commandline/create/#options
#
# @see https://github.community/t/how-to-trigger-an-action-on-push-or-pull-request-but-not-both/16662
name: Test
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
defaults:
  run:
    shell: bash
jobs:
  lint:
    name: Lint
    timeout-minutes: 5
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
      - name: Run rubocop
        run: bundle exec rubocop
  main:
    name: Main
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        redis:
          - '7.0.5'
          - '6.2.7'
        ruby:
          - '3.2'
          - '3.1'
          - '3.0'
          - '2.7'
        driver:
          - 'ruby'
          - 'hiredis'
        docker:
          - 'compose.yaml'
          - 'compose.ssl.yaml'
    runs-on: ubuntu-latest
    env:
      REDIS_VERSION: ${{ matrix.redis }}
      REDIS_CONNECTION_DRIVER: ${{ matrix.driver }}
      DOCKER_COMPOSE_FILE: ${{ matrix.docker }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}
          bundler-cache: true
      - name: Pull Docker images
        run: docker pull redis:$REDIS_VERSION
      - name: Run containers
        run: docker compose -f $DOCKER_COMPOSE_FILE up -d
      - name: Wait for Redis cluster to be ready
        run: bundle exec rake wait
      - name: Print containers
        run: docker compose -f $DOCKER_COMPOSE_FILE ps
      - name: Run minitest
        run: bundle exec rake test
      - name: Stop containers
        run: docker compose -f $DOCKER_COMPOSE_FILE down
  multiple-replicas:
    name: Multiple Replicas
    timeout-minutes: 15
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    env:
      REDIS_VERSION: '7.0.5'
      REDIS_REPLICA_SIZE: '2'
      DOCKER_COMPOSE_FILE: 'compose.replica.yaml'
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
      - name: Pull Docker images
        run: docker pull redis:$REDIS_VERSION
      - name: Run containers
        run: docker compose -f $DOCKER_COMPOSE_FILE up -d
      - name: Wait for Redis cluster to be ready
        run: bundle exec rake wait
      - name: Print containers
        run: docker compose -f $DOCKER_COMPOSE_FILE ps
      - name: Run minitest
        run: bundle exec rake test
      - name: Stop containers
        run: docker compose -f $DOCKER_COMPOSE_FILE down
  legacy-redis:
    name: Legacy Redis
    timeout-minutes: 15
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    env:
      REDIS_VERSION: '5.0.14'
      DOCKER_COMPOSE_FILE: 'compose.yaml'
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
      - name: Pull Docker images
        run: docker pull redis:$REDIS_VERSION
      - name: Run containers
        run: docker compose -f $DOCKER_COMPOSE_FILE up -d
      - name: Wait for Redis cluster to be ready
        run: bundle exec rake wait
      - name: Print containers
        run: docker compose -f $DOCKER_COMPOSE_FILE ps
      - name: Run minitest
        run: bundle exec rake test
      - name: Stop containers
        run: docker compose -f $DOCKER_COMPOSE_FILE down
  cluster-state:
    name: Cluster State
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        redis:
          - '7.0.5'
          - '6.2.7'
    runs-on: ubuntu-latest
    env:
      REDIS_VERSION: ${{ matrix.redis }}
      REDIS_REPLICA_SIZE: '2'
      DOCKER_COMPOSE_FILE: 'compose.replica.yaml'
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
      - name: Pull Docker images
        run: docker pull redis:$REDIS_VERSION
      - name: Run containers
        run: docker compose -f $DOCKER_COMPOSE_FILE up -d
      - name: Wait for Redis cluster to be ready
        run: bundle exec rake wait
      - name: Print containers
        run: docker compose -f $DOCKER_COMPOSE_FILE ps
      - name: Run minitest
        run: bundle exec rake test_cluster_state
      - name: Stop containers
        run: docker compose -f $DOCKER_COMPOSE_FILE down
  cluster-broken:
    name: Cluster Broken
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        redis:
          - '7.0.5'
          - '6.2.7'
    runs-on: ubuntu-latest
    env:
      REDIS_VERSION: ${{ matrix.redis }}
      DOCKER_COMPOSE_FILE: 'compose.yaml'
      RESTART_POLICY: 'no'
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
      - name: Pull Docker images
        run: docker pull redis:$REDIS_VERSION
      - name: Run containers
        run: docker compose -f $DOCKER_COMPOSE_FILE up -d
      - name: Wait for Redis cluster to be ready
        run: bundle exec rake wait
      - name: Print containers
        run: docker compose -f $DOCKER_COMPOSE_FILE ps
      - name: Run minitest
        run: bundle exec rake test_cluster_broken
      - name: Stop containers
        run: docker compose -f $DOCKER_COMPOSE_FILE down
  cluster-scale:
    name: Cluster Scale
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        redis:
          - '7.0.5'
          - '6.2.7'
    runs-on: ubuntu-latest
    env:
      REDIS_VERSION: ${{ matrix.redis }}
      DOCKER_COMPOSE_FILE: 'compose.scale.yaml'
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
      - name: Pull Docker images
        run: docker pull redis:$REDIS_VERSION
      - name: Run containers
        run: docker compose -f $DOCKER_COMPOSE_FILE up -d
      - name: Wait for Redis cluster to be ready
        run: bundle exec rake wait
      - name: Print containers
        run: docker compose -f $DOCKER_COMPOSE_FILE ps
      - name: Run minitest
        run: bundle exec rake test_cluster_scale
      - name: Stop containers
        run: docker compose -f $DOCKER_COMPOSE_FILE down
  nat-ted-env:
    name: NAT-ted Environments
    timeout-minutes: 15
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    env:
      REDIS_VERSION: '7.0.5'
      DOCKER_COMPOSE_FILE: 'compose.nat.yaml'
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
      - name: Get IP address of host
        run: |
          host_ip_addr=$(ip a | grep eth0 | grep inet | awk '{print $2}' | cut -d'/' -f1)
          echo "HOST_IP_ADDR=$host_ip_addr" >> $GITHUB_ENV
      - name: Pull Docker images
        run: docker pull redis:$REDIS_VERSION
      - name: Run containers
        run: docker compose -f $DOCKER_COMPOSE_FILE up -d
        env:
          HOST_ADDR: ${{ env.HOST_IP_ADDR }}
      - name: Wait for nodes to be ready
        run: |
          node_cnt=$(docker compose -f $DOCKER_COMPOSE_FILE ps | awk '{print $3}' | tail -n +2 | wc -l)
          i=0
          while :
          do
            if [[ $i -gt $MAX_ATTEMPTS ]]
            then
              echo "Max attempts exceeded: $i times"
              exit 1
            fi
            healthy_cnt=$(docker compose -f $DOCKER_COMPOSE_FILE ps | awk '{print $5}' | (grep '(healthy)' || true) | wc -l)
            if [[ $healthy_cnt -eq $node_cnt ]]
            then
              break
            fi
            echo 'Waiting for nodes to be ready...'
            sleep 3
            : $((++i))
          done
        env:
          MAX_ATTEMPTS: "10"
      - name: Print containers
        run: docker compose -f $DOCKER_COMPOSE_FILE ps
      - name: Build cluster
        run: bundle exec rake "build_cluster[$HOST_ADDR]"
        env:
          HOST_ADDR: ${{ env.HOST_IP_ADDR }}
          DEBUG: "1"
      - name: Run minitest
        run: bundle exec rake test
      - name: Stop containers
        run: docker compose -f $DOCKER_COMPOSE_FILE down
  benchmark:
    name: Benchmark
    timeout-minutes: 15
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    env:
      REDIS_VERSION: '7.0.5'
      DOCKER_COMPOSE_FILE: 'compose.latency.yaml'
      REDIS_REPLICA_SIZE: '2'
      REDIS_CLIENT_MAX_THREADS: '5'
      DELAY_TIME: '1ms'
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
      - name: Pull Docker images
        run: docker pull redis:$REDIS_VERSION
      - name: Run containers
        run: docker compose -f $DOCKER_COMPOSE_FILE up -d
      - name: Wait for Redis cluster to be ready
        run: bundle exec rake wait
      - name: Print containers
        run: docker compose -f $DOCKER_COMPOSE_FILE ps
      - name: Rebuild cluster for balancing of replicas
        run: bundle exec rake build_cluster_for_bench
        env:
          DEBUG: "1"
      - name: Print topology
        run: |
          for i in {1..9}
          do
            echo "node$i: $(docker compose -f $DOCKER_COMPOSE_FILE exec node$i redis-cli cluster nodes | grep myself)"
          done
      - name: Ping nodes
        run: |
          for i in {1..9}
          do
            node_addr="$(docker compose -f $DOCKER_COMPOSE_FILE exec node$i redis-cli cluster nodes | grep myself | awk '{print $2}' | cut -d'@' -f1 | cut -d':' -f1)"
            echo "node$i:"
            ping -c 5 $node_addr
          done
      - name: Print cpu info
        run: grep 'model name' /proc/cpuinfo
      - name: Print memory info
        run: free
      - name: Print disk info
        run: df -h
      - name: Run minitest
        run: bundle exec rake bench
      - name: Reset qdisc
        run: |
          for i in {5..9..2}
          do
            docker compose -f $DOCKER_COMPOSE_FILE exec node$i tc qdisc del dev eth0 root netem
          done
      - name: Stop containers
        run: docker compose -f $DOCKER_COMPOSE_FILE down
  memory-profile:
    name: Memory Profile
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        mode: ['single', 'excessive_pipelining', 'pipelining_in_moderation']
    runs-on: ubuntu-latest
    env:
      REDIS_VERSION: '7.0.5'
      DOCKER_COMPOSE_FILE: 'compose.yaml'
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
      - name: Pull Docker images
        run: docker pull redis:$REDIS_VERSION
      - name: Run containers
        run: docker compose -f $DOCKER_COMPOSE_FILE up -d
      - name: Wait for Redis cluster to be ready
        run: bundle exec rake wait
      - name: Print containers
        run: docker compose -f $DOCKER_COMPOSE_FILE ps
      - name: Run memory profiler
        run: bundle exec rake prof
        env:
          MEMORY_PROFILE_MODE: ${{ matrix.mode }}
      - name: Stop containers
        run: docker compose -f $DOCKER_COMPOSE_FILE down
