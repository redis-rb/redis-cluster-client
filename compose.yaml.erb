---
# bin/render_compose > compose.large.yaml
#
# https://developer.redis.com/operate/redis-at-scale/talking-to-redis/initial-tuning/
# https://github.com/redis/redis/blob/unstable/redis.conf
services:
  node001: &node
    image: "redis:${REDIS_VERSION:-7}"
    command: >
      redis-server
      --maxmemory                32mb
      --maxmemory-policy         allkeys-lru
      --maxclients               128
      --tcp-backlog              4096
      --replica-serve-stale-data yes
      --replica-read-only        yes
      --appendonly               yes
      --cluster-enabled          yes
      --cluster-config-file      nodes.conf
      --cluster-node-timeout     5000
    restart: "${RESTART_POLICY:-always}"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: "7s"
      timeout: "5s"
      retries: 10
    ports:
      - "<%= port %>:<%= port %>"
<% (2..n).each do |i| %>
  node<%= sprintf('%03d', i) %>:
    <<: *node
    ports:
      - "<%= port + i - 1 %>:<%= port %>"
<% end %>
  clustering:
    image: "redis:${REDIS_VERSION:-7}"
    command: >
      bash -c "apt-get update > /dev/null
      && apt-get install --no-install-recommends --no-install-suggests -y dnsutils > /dev/null
      && rm -rf /var/lib/apt/lists/*
      && yes yes | redis-cli --cluster create
<% n.times do |i| %>
      $$(dig node<%= sprintf('%03d', i + 1) %> +short):<%= port %>
<% end %>
      --cluster-replicas <%= (n - shards) / shards %>"
    depends_on:
<% n.times do |i| %>
      node<%= sprintf('%03d', i + 1) %>:
        condition: service_healthy
<% end %>
